CREATE TABLE ACCOUNT (
    ACCOUNTID INT CONSTRAINT ACCOUNT_ACCOUNTID_PK PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    USERNAME VARCHAR(20) CONSTRAINT ACCOUNT_USERNAME_UK UNIQUE,
    PASSWORD VARCHAR(20),
    FNAME VARCHAR(50),
    LNAME VARCHAR(50),
    EMAIL VARCHAR(50),
    CLASS VARCHAR(6) CONSTRAINT ACCOUNT_CLASS_CK CHECK (CLASS IN ('BLUE','SILVER','GOLD','ADMIN')),
    SCORE INT
);
CREATE TABLE ADDRESS (
    ADDRESSID INT CONSTRAINT ADDRESS_ADDRESSID_PF PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    ADDRESS VARCHAR(500),
    DISTICT VARCHAR(50),
    PROVINCE VARCHAR(50),
    POSTCODE INT,
    ACCOUNTID INT CONSTRAINT ADDRESS_ACCOUNTID_FK REFERENCES ACCOUNT(ACCOUNTID)
);
CREATE TABLE PRODUCTS (
    PRODUCTID INT CONSTRAINT PRODUCTS_PRODUCTID_PK PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    PRODUCTCODE VARCHAR(8),
    PRODUCTNAME VARCHAR(50),
    PRODUCTTYPE VARCHAR(10) CONSTRAINT PRODUCTS_PRODUCTTYPE_CK CHECK (PRODUCTTYPE IN ('SHIRT','BRA','HOOD','PLANT','SHORT','SNEAKER','SLIPPER')),
    PRODUCTBAND VARCHAR(8) CONSTRAINT PRODUCTS_PRODUCTBAND_CK CHECK (PRODUCTBAND IN ('CHAMPION','NIKE','ADIDAS','FILA')),
    COLOR VARCHAR(10),
    PRICE DOUBLE
);
CREATE TABLE SIZES (
    SIZEID INT CONSTRAINT SIZES_SIZEID_PK PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    SIZE VARCHAR(4) CONSTRAINT SIZES_SIZE_CK CHECK (SIZE IN ('S','M','L','XL','7','7.5','8','8.5','9','9.5','10')),
    QUANTITY INT,
    PRODUCTID INT CONSTRAINT SIZES_PRODUCTID_FK REFERENCES PRODUCTS(PRODUCTID)
);
CREATE TABLE ORDERS (
    ORDERID INT CONSTRAINT ORDERS_ORDERID_PK PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    ORDERCODE VARCHAR(12),
    TOTALPRICE DOUBLE,
    ACCOUNTID INT CONSTRAINT ORDERS_ACCOUNTID_FK REFERENCES ACCOUNT(ACCOUNTID)
);
CREATE TABLE ORDERLISTS (
    ORDERLISTID INT CONSTRAINT ORDERLISTS_ORDERLISTID_PK PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    PRODUCTID INT CONSTRAINT ORDERLISTS_PRODUCTID_FK REFERENCES PRODUCTS(PRODUCTID),
    SIZEID INT CONSTRAINT ORDERLISTS_SIZEID_FK REFERENCES SIZES(SIZEID),
    QUANTITY INT,
    TOTALPRICE DOUBLE,
    ORDERID INT CONSTRAINT ORDERLISTS_ORDERID_FK REFERENCES ORDERS(ORDERID)
);
CREATE TABLE WISHLISHS (
    WISHLISHID INT CONSTRAINT WISHLISH_WISHLISHID_PK PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    PRODUCTID INT CONSTRAINT WISHLISH_PRODUCTID_FK REFERENCES PRODUCTS(PRODUCTID),
    ACCOUNTID INT CONSTRAINT WISHLISH_ACCOUNTID_FK REFERENCES ACCOUNT(ACCOUNTID)
);

INSERT INTO PRODUCTS(PRODUCTCODE,PRODUCTNAME,PRODUCTTYPE,PRODUCTBAND,COLOR,PRICE)
VALUES ('CFPC0001','ADIDAS0001','SHIRT','ADIDAS','BLACK',1300),
       ('CFPC0002','ADIDAS0002','SHIRT','ADIDAS','WHITE',1300);

INSERT INTO SIZES(SIZE,QUANTITY,PRODUCTID)
VALUES ('S',100,1),
       ('M',100,1),
       ('L',100,1),
       ('XL',50,1),
       ('S',100,2),
       ('M',100,2),
       ('L',100,2),
       ('XL',50,2);

    public List<Products> findByBrand(String search) {
        EntityManager em = getEntityManager();
        try {
            Query query = em.createNamedQuery("Products.findByProductband");
            query.setParameter("productband", search);
            return query.getResultList();
        } finally {
            em.close();
        }
    }

    public List<Products> findByColor(String search) {
        EntityManager em = getEntityManager();
        try {
            Query query = em.createNamedQuery("Products.findByColor");
            query.setParameter("color", search);
            return query.getResultList();
        } finally {
            em.close();
        }
    }

    public List<Products> findByCloth() {
        EntityManager em = getEntityManager();
        try {
            Query query = em.createNamedQuery("Products.findByCloth");
            query.setParameter("shirt", "SHIRT");
            query.setParameter("bra", "BRA");
            query.setParameter("hood", "HOOD");
            query.setParameter("pant", "PLANT");
            query.setParameter("short", "SHORT");
            return query.getResultList();
        } finally {
            em.close();
        }
    }

    public List<Products> findByShoes() {
        EntityManager em = getEntityManager();
        try {
            Query query = em.createNamedQuery("Products.findByShoes");
            query.setParameter("sneaker", "SNEAKER");
            query.setParameter("slipper", "SLIPPER");
            return query.getResultList();
        } finally {
            em.close();
        }
    }

    public List<Products> findByType(String search) {
        EntityManager em = getEntityManager();
        try {
            Query query = em.createNamedQuery("Products.findByProducttype");
            if (search.equals("PANT")) {
                search = "PLANT";
            }
            query.setParameter("producttype", search);
            return query.getResultList();
        } finally {
            em.close();
        }
    }

    public List<Products> findByProductName(String search) {
        EntityManager em = getEntityManager();
        try {
            Query query = em.createNamedQuery("Products.findByProductname");
            query.setParameter("productname", "%" + search + "%");
            return query.getResultList();
        } finally {
            em.close();
        }
    }